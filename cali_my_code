import numpy as np
import cv2 as cv
import glob
# termination criteria
col_num = 8-1
row_num = 7-1
grid_size = 15 # 15mm
max_iter_num = 30
err_thresh = 0.001  # 0.001m, i.e. mm

criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, max_iter_num, err_thresh)
# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
objp = np.zeros((col_num*row_num,3), np.float32)
objp[:,:2] = np.mgrid[0:col_num,0:row_num].T.reshape(-1,2)
objp = objp * grid_size  # 棋盘方块边长15 mm
# Arrays to store object points and image points from all the images.
objpoints = [] # 3d point in real world space
imgpoints = [] # 2d points in image plane.
images = glob.glob('cali_imgs/*.jpg')
for fname in images:
    img = cv.imread(fname)
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    # Find the chess board corners
    ret, corners = cv.findChessboardCorners(gray, (col_num,row_num), None)
    # If found, add object points, image points (after refining them)
    if ret == True:
        objpoints.append(objp)
        corners2 = cv.cornerSubPix(gray,corners, (11,11), (-1,-1), criteria)
        imgpoints.append(corners2)
        # Draw and display the corners
        cv.drawChessboardCorners(img, (col_num,row_num), corners2, ret)
        cv.imshow('img', img)
        cv.waitKey(500)
cv.destroyAllWindows()

ret, mtx, dist, rvecs, tvecs = \
     cv.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

print("ret:",ret  )
print("mtx:\n",mtx)        # 内参数矩阵
print("dist:\n",dist   )   # 畸变系数   distortion cofficients = (k_1,k_2,p_1,p_2,k_3)
print("rvecs:\n",rvecs)    # 旋转向量  # 外参数
print("tvecs:\n",tvecs  )  # 平移向量  # 外参数

np.save("cam_mtx.npy",mtx)
np.save("cam_dist.npy",dist)
